generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Status {
  active
  inactive
  banned
}

model comments {
  id             BigInt     @id @default(autoincrement())
  user_id        BigInt
  post_id        BigInt
  parent_id      BigInt?
  comment        String
  is_edited      Boolean    @default(false)
  is_pinned      Boolean    @default(false)
  likes_count    Int        @default(0)
  created_at     DateTime?  @db.Timestamp(0)
  updated_at     DateTime?  @db.Timestamp(0)
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_parent_id_foreign")
  other_comments comments[] @relation("commentsTocomments")
  posts          posts      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_post_id_foreign")
  users          users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_user_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model likes {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  post_id    BigInt
  source     String?   @db.VarChar(255)
  is_active  Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "likes_post_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "likes_user_id_foreign")

  @@unique([user_id, post_id], map: "likes_user_id_post_id_unique")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model posts {
  id             BigInt     @id @default(autoincrement())
  user_id        BigInt
  media_url      String     @db.VarChar(255)
  media_type     String     @default("image") @db.VarChar(255)
  caption        String?
  location       String?    @db.VarChar(255)
  tags           Json?      @db.Json
  visibility     String     @default("public") @db.VarChar(255)
  scheduled_at   DateTime?  @db.Timestamp(0)
  likes_count    Int        @default(0)
  comments_count Int        @default(0)
  is_active      Boolean    @default(true)
  created_at     DateTime?  @db.Timestamp(0)
  updated_at     DateTime?  @db.Timestamp(0)
  comments       comments[]
  likes          likes[]
  users          users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_user_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                BigInt     @id @default(autoincrement())
  name              String     @db.VarChar(255)
  username          String     @unique(map: "users_username_unique") @db.VarChar(255)
  email             String?    @unique(map: "users_email_unique") @db.VarChar(255)
  phone             String?    @db.VarChar(255)
  password          String     @db.VarChar(255)
  bio               String?
  profile_image     String?
  website           String?    @db.VarChar(255)
  gender            Gender?
  date_of_birth     DateTime?  @db.Date
  status            Status
  last_login_at     DateTime?  @db.Timestamp(0)
  email_verified_at DateTime?  @db.Timestamp(0)
  remember_token    String?    @db.VarChar(100)
  created_at        DateTime?  @db.Timestamp(0)
  updated_at        DateTime?  @db.Timestamp(0)
  deleted_at        DateTime?  @db.Timestamp(0)
  comments          comments[]
  likes             likes[]
  posts             posts[]

  @@index([phone], map: "users_phone_index")
}
